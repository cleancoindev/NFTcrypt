{
  "contractName": "EncKeyRegistry",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "encKey",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "setKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getKey",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "deleteKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deleteKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"encKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"setKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Martin Strobl\",\"methods\":{\"getKey(address)\":{\"params\":{\"_address\":\"target address\"},\"returns\":{\"_0\":\"encryption key as a string\"}},\"setKey(string)\":{\"params\":{\"key\":\"encryption key to be stored as string\"}}},\"title\":\"Encryption key registry\"},\"userdoc\":{\"methods\":{\"deleteKey()\":{\"notice\":\"Deletes user's encryption key from the registry\"},\"getKey(address)\":{\"notice\":\"Retrieves the key of a given address\"},\"setKey(string)\":{\"notice\":\"Saves user's encryption key to the registry\"}},\"notice\":\"Stores user's public encription key generated by Metamask, the publicity of the key does not pose any security risk to the wallet/funds\"}},\"settings\":{\"compilationTarget\":{\"/Users/au642254/Disk Google/eth_ad/dev/nftcrypt/truffle_repo/nftcrypt/nftcrypt-truffle-project/contracts/EncKeyRegistry.sol\":\"EncKeyRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/au642254/Disk Google/eth_ad/dev/nftcrypt/truffle_repo/nftcrypt/nftcrypt-truffle-project/contracts/EncKeyRegistry.sol\":{\"keccak256\":\"0xd8d88686cdf9f351e074b861e1e60d3c1642ae64cd4c227efc813d766f4201ef\",\"urls\":[\"bzz-raw://a84a21f0dd272f48b9d1cd900c874ac272e329923dd672394f9b239a2c49cd10\",\"dweb:/ipfs/Qmb51u9XrkCBYSbaZEMNzECxCFaKQ5zvcebLmWVDtzfXS2\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506105e5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806355a7f3371461005157806393790f441461010e578063af42d106146101cb578063e8510fc914610286575b600080fd5b6100936004803603602081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610290565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d35780820151818401526020810190506100b8565b50505050905090810190601f1680156101005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101506004803603602081101561012457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610340565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610190578082015181840152602081019050610175565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610284600480360360208110156101e157600080fd5b81019080803590602001906401000000008111156101fe57600080fd5b82018360208201111561021057600080fd5b8035906020019184600183028401116401000000008311171561023257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610420565b005b61028e610476565b005b60006020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b50505050509050919050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906104729291906104c2565b5050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006104c09190610542565b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061050357805160ff1916838001178555610531565b82800160010185558215610531579182015b82811115610530578251825591602001919060010190610515565b5b50905061053e919061058a565b5090565b50805460018160011615610100020316600290046000825580601f106105685750610587565b601f016020900490600052602060002090810190610586919061058a565b5b50565b6105ac91905b808211156105a8576000816000905550600101610590565b5090565b9056fea264697066735822122061fd05a08496baafd07dfb28d0a62de0685caca1e01537d0b37f492462428fb664736f6c63430006020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806355a7f3371461005157806393790f441461010e578063af42d106146101cb578063e8510fc914610286575b600080fd5b6100936004803603602081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610290565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100d35780820151818401526020810190506100b8565b50505050905090810190601f1680156101005780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101506004803603602081101561012457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610340565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610190578082015181840152602081019050610175565b50505050905090810190601f1680156101bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610284600480360360208110156101e157600080fd5b81019080803590602001906401000000008111156101fe57600080fd5b82018360208201111561021057600080fd5b8035906020019184600183028401116401000000008311171561023257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610420565b005b61028e610476565b005b60006020528060005260406000206000915090508054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103385780601f1061030d57610100808354040283529160200191610338565b820191906000526020600020905b81548152906001019060200180831161031b57829003601f168201915b505050505081565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104145780601f106103e957610100808354040283529160200191610414565b820191906000526020600020905b8154815290600101906020018083116103f757829003601f168201915b50505050509050919050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906104729291906104c2565b5050565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006104c09190610542565b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061050357805160ff1916838001178555610531565b82800160010185558215610531579182015b82811115610530578251825591602001919060010190610515565b5b50905061053e919061058a565b5090565b50805460018160011615610100020316600290046000825580601f106105685750610587565b601f016020900490600052602060002090810190610586919061058a565b5b50565b6105ac91905b808211156105a8576000816000905550600101610590565b5090565b9056fea264697066735822122061fd05a08496baafd07dfb28d0a62de0685caca1e01537d0b37f492462428fb664736f6c63430006020033",
  "sourceMap": "245:717:0:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;245:717:0;;;;;;;",
  "deployedSourceMap": "245:717:0:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;245:717:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;322:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;322:40:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;322:40:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;710:110;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;710:110:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;710:110:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;486:83;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;486:83:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;486:83:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;486:83:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;486:83:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;486:83:0;;;;;;;;;;;;;;;:::i;:::-;;890:70;;;:::i;:::-;;322:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;710:110::-;765:13;797:6;:16;804:8;797:16;;;;;;;;;;;;;;;790:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;710:110;;;:::o;486:83::-;559:3;538:6;:18;545:10;538:18;;;;;;;;;;;;;;;:24;;;;;;;;;;;;:::i;:::-;;486:83;:::o;890:70::-;935:6;:18;942:10;935:18;;;;;;;;;;;;;;;;928:25;;;;:::i;:::-;890:70::o;245:717::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "pragma solidity >= 0.5.0 < 0.7.0;\n\n\n/// @title Encryption key registry\n/// @author Martin Strobl\n/// @notice Stores user's public encription key generated by Metamask, the publicity of the key does not pose any security risk to the wallet/funds\ncontract EncKeyRegistry {\n    /// mapping from address to encryption key\n    mapping(address => string) public encKey;\n\n    /// @notice Saves user's encryption key to the registry\n    /// @param key encryption key to be stored as string\n    function setKey(string memory key) public {\n        encKey[msg.sender] = key;\n    }\n\n    /// @notice Retrieves the key of a given address\n    /// @param _address target address\n    /// @return encryption key as a string\n    function getKey(address _address) public view returns (string memory) {\n        return encKey[_address];\n    }\n\n    /// @notice Deletes user's encryption key from the registry\n    function deleteKey() public {\n        delete encKey[msg.sender];\n    }\n}\n",
  "sourcePath": "/Users/au642254/Disk Google/eth_ad/dev/nftcrypt/truffle_repo/nftcrypt/nftcrypt-truffle-project/contracts/EncKeyRegistry.sol",
  "ast": {
    "absolutePath": "/Users/au642254/Disk Google/eth_ad/dev/nftcrypt/truffle_repo/nftcrypt/nftcrypt-truffle-project/contracts/EncKeyRegistry.sol",
    "exportedSymbols": {
      "EncKeyRegistry": [
        41
      ]
    },
    "id": 42,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:33:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Encryption key registry\n @author Martin Strobl\n @notice Stores user's public encription key generated by Metamask, the publicity of the key does not pose any security risk to the wallet/funds",
        "fullyImplemented": true,
        "id": 41,
        "linearizedBaseContracts": [
          41
        ],
        "name": "EncKeyRegistry",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "55a7f337",
            "id": 5,
            "name": "encKey",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 41,
            "src": "322:40:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
              "typeString": "mapping(address => string)"
            },
            "typeName": {
              "id": 4,
              "keyType": {
                "id": 2,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "330:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "322:26:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
                "typeString": "mapping(address => string)"
              },
              "valueType": {
                "id": 3,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "341:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 17,
              "nodeType": "Block",
              "src": "528:41:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 10,
                        "name": "encKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5,
                        "src": "538:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
                          "typeString": "mapping(address => string storage ref)"
                        }
                      },
                      "id": 13,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 11,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "545:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 12,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "545:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "538:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 14,
                      "name": "key",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "559:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "538:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 16,
                  "nodeType": "ExpressionStatement",
                  "src": "538:24:0"
                }
              ]
            },
            "documentation": "@notice Saves user's encryption key to the registry\n @param key encryption key to be stored as string",
            "functionSelector": "af42d106",
            "id": 18,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setKey",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "name": "key",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 18,
                  "src": "502:17:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "502:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "501:19:0"
            },
            "returnParameters": {
              "id": 9,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "528:0:0"
            },
            "scope": 41,
            "src": "486:83:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 29,
              "nodeType": "Block",
              "src": "780:40:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 25,
                      "name": "encKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "797:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
                        "typeString": "mapping(address => string storage ref)"
                      }
                    },
                    "id": 27,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 26,
                      "name": "_address",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20,
                      "src": "804:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "797:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 24,
                  "id": 28,
                  "nodeType": "Return",
                  "src": "790:23:0"
                }
              ]
            },
            "documentation": "@notice Retrieves the key of a given address\n @param _address target address\n @return encryption key as a string",
            "functionSelector": "93790f44",
            "id": 30,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getKey",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 21,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20,
                  "name": "_address",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 30,
                  "src": "726:16:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "726:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "725:18:0"
            },
            "returnParameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 30,
                  "src": "765:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "765:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "764:15:0"
            },
            "scope": 41,
            "src": "710:110:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 39,
              "nodeType": "Block",
              "src": "918:42:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 37,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "928:25:0",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 33,
                        "name": "encKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5,
                        "src": "935:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
                          "typeString": "mapping(address => string storage ref)"
                        }
                      },
                      "id": 36,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 34,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "942:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "942:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "935:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 38,
                  "nodeType": "ExpressionStatement",
                  "src": "928:25:0"
                }
              ]
            },
            "documentation": "@notice Deletes user's encryption key from the registry",
            "functionSelector": "e8510fc9",
            "id": 40,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteKey",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "908:2:0"
            },
            "returnParameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "918:0:0"
            },
            "scope": 41,
            "src": "890:70:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 42,
        "src": "245:717:0"
      }
    ],
    "src": "0:963:0"
  },
  "legacyAST": {
    "absolutePath": "/Users/au642254/Disk Google/eth_ad/dev/nftcrypt/truffle_repo/nftcrypt/nftcrypt-truffle-project/contracts/EncKeyRegistry.sol",
    "exportedSymbols": {
      "EncKeyRegistry": [
        41
      ]
    },
    "id": 42,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:33:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "@title Encryption key registry\n @author Martin Strobl\n @notice Stores user's public encription key generated by Metamask, the publicity of the key does not pose any security risk to the wallet/funds",
        "fullyImplemented": true,
        "id": 41,
        "linearizedBaseContracts": [
          41
        ],
        "name": "EncKeyRegistry",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "55a7f337",
            "id": 5,
            "name": "encKey",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 41,
            "src": "322:40:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
              "typeString": "mapping(address => string)"
            },
            "typeName": {
              "id": 4,
              "keyType": {
                "id": 2,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "330:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "322:26:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
                "typeString": "mapping(address => string)"
              },
              "valueType": {
                "id": 3,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "341:6:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 17,
              "nodeType": "Block",
              "src": "528:41:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 15,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 10,
                        "name": "encKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5,
                        "src": "538:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
                          "typeString": "mapping(address => string storage ref)"
                        }
                      },
                      "id": 13,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 11,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "545:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 12,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "545:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "538:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 14,
                      "name": "key",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "559:3:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "538:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 16,
                  "nodeType": "ExpressionStatement",
                  "src": "538:24:0"
                }
              ]
            },
            "documentation": "@notice Saves user's encryption key to the registry\n @param key encryption key to be stored as string",
            "functionSelector": "af42d106",
            "id": 18,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setKey",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 8,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7,
                  "name": "key",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 18,
                  "src": "502:17:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "502:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "501:19:0"
            },
            "returnParameters": {
              "id": 9,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "528:0:0"
            },
            "scope": 41,
            "src": "486:83:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 29,
              "nodeType": "Block",
              "src": "780:40:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 25,
                      "name": "encKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5,
                      "src": "797:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
                        "typeString": "mapping(address => string storage ref)"
                      }
                    },
                    "id": 27,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 26,
                      "name": "_address",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20,
                      "src": "804:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "797:16:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 24,
                  "id": 28,
                  "nodeType": "Return",
                  "src": "790:23:0"
                }
              ]
            },
            "documentation": "@notice Retrieves the key of a given address\n @param _address target address\n @return encryption key as a string",
            "functionSelector": "93790f44",
            "id": 30,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getKey",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 21,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20,
                  "name": "_address",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 30,
                  "src": "726:16:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 19,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "726:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "725:18:0"
            },
            "returnParameters": {
              "id": 24,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 30,
                  "src": "765:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "765:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "764:15:0"
            },
            "scope": 41,
            "src": "710:110:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 39,
              "nodeType": "Block",
              "src": "918:42:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 37,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "delete",
                    "prefix": true,
                    "src": "928:25:0",
                    "subExpression": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 33,
                        "name": "encKey",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 5,
                        "src": "935:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
                          "typeString": "mapping(address => string storage ref)"
                        }
                      },
                      "id": 36,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 34,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "942:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 35,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "942:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "935:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 38,
                  "nodeType": "ExpressionStatement",
                  "src": "928:25:0"
                }
              ]
            },
            "documentation": "@notice Deletes user's encryption key from the registry",
            "functionSelector": "e8510fc9",
            "id": 40,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deleteKey",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 31,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "908:2:0"
            },
            "returnParameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "918:0:0"
            },
            "scope": 41,
            "src": "890:70:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 42,
        "src": "245:717:0"
      }
    ],
    "src": "0:963:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.2+commit.bacdbe57.Emscripten.clang"
  },
  "networks": {
    "3": {
      "events": {},
      "links": {},
      "address": "0x9F86dea78c52D9B5D67164687c62A6e098EB637D",
      "transactionHash": "0x5db0421382078b0e9c3e6ed268111dd4c27c3746d98f74663ac77354d38661af"
    },
    "1606813481764": {
      "events": {},
      "links": {},
      "address": "0x8deD7fBe5b2902d459a1093D7C23ea2663A8312B",
      "transactionHash": "0x5f4fb5ac0ca1b3a7e6062f4ef0b62a9a93a7f02d42bb7979550087c5a058160a"
    },
    "1606934169749": {
      "events": {},
      "links": {},
      "address": "0x6f347C8eb461c0F3CEbaDb3a1248D3f818934964",
      "transactionHash": "0x3e5f1f34df9ba57d3c2a12e04ce2256df4fdf21e13e7a369d95aaf69dc0adb1c"
    },
    "1607165439176": {
      "events": {},
      "links": {},
      "address": "0x65c02fe0498A6dfCc6bc1D872F46931aE60cc009",
      "transactionHash": "0x88f429f90458574e0d411bb242c799e69f76b922f00658fb7be955b5b304e278"
    },
    "1607522880790": {
      "events": {},
      "links": {},
      "address": "0x63E5E77Bb88aFB4c62daB0f792B661E0c11AF150",
      "transactionHash": "0x93e32f5636de4abdb6f672cd23408de948e7120ebadcd77d6b00ea57b4a2f00c"
    },
    "1607524075733": {
      "events": {},
      "links": {},
      "address": "0xcDBB886359e0E23edfA8E9e4345A59800D8dF194",
      "transactionHash": "0xf05f54b5215a5a914c373d62571fac8252c778a9864d77a7502b55373d7ba9cc"
    },
    "1608284838836": {
      "events": {},
      "links": {},
      "address": "0x1fCBB409e3300B5E6B16B18Bd6dC65f7EA2e58b6",
      "transactionHash": "0x7ced101d5b8ebb9160e7d3eb827cc646ab206eaf4fcbc8a262a8ce958d9d78df"
    }
  },
  "schemaVersion": "3.1.0",
  "updatedAt": "2020-12-18T09:55:49.137Z",
  "networkType": "ethereum",
  "devdoc": {
    "author": "Martin Strobl",
    "methods": {
      "getKey(address)": {
        "params": {
          "_address": "target address"
        },
        "returns": {
          "_0": "encryption key as a string"
        }
      },
      "setKey(string)": {
        "params": {
          "key": "encryption key to be stored as string"
        }
      }
    },
    "title": "Encryption key registry"
  },
  "userdoc": {
    "methods": {
      "deleteKey()": {
        "notice": "Deletes user's encryption key from the registry"
      },
      "getKey(address)": {
        "notice": "Retrieves the key of a given address"
      },
      "setKey(string)": {
        "notice": "Saves user's encryption key to the registry"
      }
    },
    "notice": "Stores user's public encription key generated by Metamask, the publicity of the key does not pose any security risk to the wallet/funds"
  }
}