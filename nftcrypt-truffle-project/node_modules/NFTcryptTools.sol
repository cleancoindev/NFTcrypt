pragma solidity >=0.6.0 <0.8.0;
import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/EnumerableSet.sol";
import "@openzeppelin/contracts/utils/EnumerableMap.sol";
import "@openzeppelin/contracts/utils/Strings.sol";

/// @title NFTcryptTools - stores key mappings and handling functions
/// @author Martin Strobl
/// @notice This contract serves as a codebase for the Child ERC721 contract, all the internal functions are callable from there by the contract owner; all functions either internal or public view
contract NFTcryptTools {
  using SafeMath for uint256;
  using Address for address;
  using EnumerableSet for EnumerableSet.UintSet;
  using EnumerableMap for EnumerableMap.UintToAddressMap;
  using Strings for uint256;

  // mapping from batchId to hashed secret
  mapping (uint256 => string) public _secretHash;
  // mapping from tokenId to encrypted secret
  mapping (uint256 => string) public _encrSecret;
  // mapping from tokenId to its price
  mapping (uint256 => uint256) public origPrice;
  // mapping from tokenId to a binary indicator of 'for sale' status
  mapping (uint256 => bool) public forSale;
  // 1:n mapping from batchId to set of tokenIds
  mapping (uint256 => EnumerableSet.UintSet) _batchSet;
  // mapping from batchId to the number of tokens it contains
  mapping (uint256 => uint256) public batchMax;

  /// @notice tokens issued
  uint256 public maxIndex = 0;
  /// @notice batches issued
  uint256 public lastBatch = 0;
  /// @notice pause dummy
  bool public stopped = false;

  /// @notice stops the function if emergency is triggered
  modifier stopInEmergency { require(!stopped); _; }


  /// @notice Log when price set and put up for sale
  event LogPriceSet(uint256 tokenId,uint256 price);
  /// @notice Log for new hash assigned
  event LogNewHash(uint256 batchId, string  hashed);
  /// @notice Log for new secret assigned
  event LogNewSecret(uint256 tokenId, string  secret);

  /// @notice Returns the number of tokens in a given batch
  /// @dev the require() ensures batch exists
  /// @param batchId target batch
  /// @return number of tokens in a batch
  function batchSize(uint256 batchId) public view returns (uint256)  {
    require(lastBatch>=batchId);
    return batchMax[batchId];
  }

  /// @notice Assigns a hash to a batch
  /// @dev internal, callable from Child
  /// @param batchId target batch
  /// @param hashed the hash of unencrypted secret
  function _setSecretHash(uint256 batchId, string memory hashed) internal  {
   _secretHash[batchId] = hashed;
   emit LogNewHash( batchId,   hashed);
 }

 /// @notice Returns the secret hash of a batch
 /// @param batchId target batch
 /// @return hash as a string
 function viewSecretHash(uint256 batchId) public view returns (string memory) {
   return _secretHash[batchId];
 }

 /// @notice Assigns a secret to a token
 /// @dev internal, callable from Child
 /// @param tokenId target token
 /// @param secret encrypted secret to be assigned
 function _setEncSecret(uint256 tokenId, string memory secret) internal {
   _encrSecret[tokenId] = secret;
   emit LogNewSecret( tokenId,   secret);
 }

 /// @notice Returns the secret of a token
 /// @param tokenId target token
 /// @return secret as a string
 function viewEncSecret(uint256 tokenId) public view returns (string memory) {
   return _encrSecret[tokenId];
 }

 /// @notice Returns the price of a given token
 /// @dev the require() ensures the token is for sale
 /// @param tokenId target token
 /// @return the min price for a given token as uint256
 function getPrice(uint256 tokenId) public view returns(uint256) {
   require(forSale[tokenId]==true);
   return  origPrice[tokenId];
 }

 /// @notice Sets the price for a token and puts it up for sale
 /// @dev internal, callable from Child
 /// @param tokenId target token
 /// @param price min price to be assigned
 function _setPrice(uint256 tokenId, uint256 price) internal {
     origPrice[tokenId]=price;
     forSale[tokenId]=true;
     emit LogPriceSet(tokenId,price);


 }
}
